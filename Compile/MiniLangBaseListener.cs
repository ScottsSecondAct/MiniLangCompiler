//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MiniLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMiniLangListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class MiniLangBaseListener : IMiniLangListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] MiniLangParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] MiniLangParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] MiniLangParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] MiniLangParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.assignStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStmt([NotNull] MiniLangParser.AssignStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.assignStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStmt([NotNull] MiniLangParser.AssignStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.printStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintStmt([NotNull] MiniLangParser.PrintStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.printStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintStmt([NotNull] MiniLangParser.PrintStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MiniLangParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] MiniLangParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MiniLangParser.ifStmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] MiniLangParser.IfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MulDivExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulDivExpr([NotNull] MiniLangParser.MulDivExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MulDivExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulDivExpr([NotNull] MiniLangParser.MulDivExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdExpr([NotNull] MiniLangParser.IdExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdExpr([NotNull] MiniLangParser.IdExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberExpr([NotNull] MiniLangParser.NumberExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberExpr([NotNull] MiniLangParser.NumberExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>CompareExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCompareExpr([NotNull] MiniLangParser.CompareExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>CompareExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCompareExpr([NotNull] MiniLangParser.CompareExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParensExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParensExpr([NotNull] MiniLangParser.ParensExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParensExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParensExpr([NotNull] MiniLangParser.ParensExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddSubExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSubExpr([NotNull] MiniLangParser.AddSubExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddSubExpr</c>
	/// labeled alternative in <see cref="MiniLangParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSubExpr([NotNull] MiniLangParser.AddSubExprContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
